#!/bin/bash

if [ $# -lt 1 ]; then
    echo "Provide alias in format alias/<aliasname>. No action taken."
    exit 1
fi

KEYID_EBS=$(aws kms describe-key --key-id "$1" --query 'KeyMetadata.KeyId' --output text)
TEMPFILE=$(mktemp)

aws kms get-key-policy --key-id "$KEYID_EBS" --policy-name default --output text --query Policy |
python3 - "$TEMPFILE" <<'EOF'
import json
import sys

outfile = sys.argv[1]
new_statement = {
    "Sid": "Allow use of the KMS key for central backup cross-account copy, in organization",
    "Effect": "Allow",
    "Principal": {
        "AWS": "arn:aws:iam::160382898764:root"
    },
    "Action": [
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*",
        "kms:Encrypt",
        "kms:DescribeKey",
        "kms:Decrypt",
        "kms:CreateGrant"
    ],
    "Resource": "*"
}

policy = json.load(sys.stdin)
statements = policy.get("Statement", [])
if any(stmt.get("Sid") == new_statement["Sid"] for stmt in statements):
    sys.exit(1)

statements.append(new_statement)
policy["Statement"] = statements
with open(outfile, "w") as f:
    json.dump(policy, f)
EOF

if [ $? -ne 0 ]; then
    echo "No update needed. Policy statement already exists."
    rm -f "$TEMPFILE"
    exit 0
fi

aws kms put-key-policy --key-id "$KEYID_EBS" --policy-name default --policy "file://$TEMPFILE"
rm -f "$TEMPFILE"
